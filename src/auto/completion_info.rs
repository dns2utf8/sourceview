// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use gobject_sys;
use gtk;
use gtk_source_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct CompletionInfo(Object<gtk_source_sys::GtkSourceCompletionInfo, gtk_source_sys::GtkSourceCompletionInfoClass, CompletionInfoClass>) @extends gtk::Window, gtk::Bin, gtk::Container, gtk::Widget, @implements gtk::Buildable;

    match fn {
        get_type => || gtk_source_sys::gtk_source_completion_info_get_type(),
    }
}

impl CompletionInfo {
    pub fn new() -> CompletionInfo {
        assert_initialized_main_thread!();
        unsafe { from_glib_none(gtk_source_sys::gtk_source_completion_info_new()) }
    }
}

impl Default for CompletionInfo {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_COMPLETION_INFO: Option<&CompletionInfo> = None;

pub trait CompletionInfoExt: 'static {
    #[cfg_attr(feature = "v3_8", deprecated)]
    fn get_widget(&self) -> Option<gtk::Widget>;

    #[cfg_attr(feature = "v3_8", deprecated)]
    fn set_widget<P: IsA<gtk::Widget>>(&self, widget: Option<&P>);

    #[cfg_attr(feature = "v3_10", deprecated)]
    fn connect_before_show<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v3_10", deprecated)]
    fn emit_before_show(&self);
}

impl<O: IsA<CompletionInfo>> CompletionInfoExt for O {
    fn get_widget(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_completion_info_get_widget(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_widget<P: IsA<gtk::Widget>>(&self, widget: Option<&P>) {
        unsafe {
            gtk_source_sys::gtk_source_completion_info_set_widget(
                self.as_ref().to_glib_none().0,
                widget.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn connect_before_show<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn before_show_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut gtk_source_sys::GtkSourceCompletionInfo,
            f: glib_sys::gpointer,
        ) where
            P: IsA<CompletionInfo>,
        {
            let f: &F = &*(f as *const F);
            f(&CompletionInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"before-show\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    before_show_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn emit_before_show(&self) {
        let _ = unsafe {
            glib::Object::from_glib_borrow(self.to_glib_none().0 as *mut gobject_sys::GObject)
                .emit("before-show", &[])
                .unwrap()
        };
    }
}

impl fmt::Display for CompletionInfo {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CompletionInfo")
    }
}
